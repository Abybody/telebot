from os import link
from pickle import NONE
from tkinter.tix import TEXT
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.dispatcher.filters import Text
from aiohttp import Payload
import keyboards as nav

import logging

import sqlite3

import asyncio # –∞—Å–∏–Ω—Ö—Ä–æ–Ω–∫–∞ –¥–ª—è –ø–æ–∑–¥–Ω–∏—Ö –ª–æ–≥–æ–≤

from config import TOKEN

# —Ä–µ—Ñ–µ—Ä–∞–ª–∫–∞
from aiogram.utils.deep_linking import get_start_link, decode_payload
from aiogram import types

# —Å—á–µ—Ç—á–∏–∫
from collections import Counter

from config import TOKEN, CHANNEL_ID_ADM, CHANNEL_ID_NEED_ADM

CHANNEL_ID = '-1001539650256' # –∞–π–¥–∏ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –≤—Å–µ—Ö –ª–æ–≥–æ–≤ 
CHANNEL_ID_NEED = '-1001550195051' # –∞–π–¥–∏ –∫–∞–Ω–∞–ª–∞ –≥–¥–µ —á–∏—Å—Ç—ã–µ –ª–æ–≥–∏ –±–µ–∑ –∫–Ω–æ–ø–æ–∫

# –ü–∏—à—É –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å –≥–¥–µ –º–æ–∏ –µ–±–∞–Ω—ã–µ –æ—à–∏–±–∫–∏
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)


#base = sqlite3.connect('data.db') # —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
#cur = conn.cursor('') # cur –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–¥
#cur.execute('CREATE TABLE users(user_id INTEGER, username TEXT)') # –¥–æ–±–∞–≤–∏–ª —Å—Ç—Ä–æ–∫—É
def sql_start():
    global base, cur
    base = sqlite3.connect('data.db')
    cur = base.cursor()
    if base:
        print('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞')
    else:
        print('–±–ª—è –Ω–∏—Ö—É—è')
    base.execute('CREATE TABLE IF NOT EXISTS users(user_id INTEGER PRIMARY KEY NOT NULL, link TEXT INTEGER, ref_manager TEXT INTEGER, referals INTEGER)')
    base.commit()

sql_start() # –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å –ë–î

# –¥–æ–±–∞–≤–ª—è—é —é–∑–µ—Ä–∞ –≤ –±–¥ –ø—Ä–∏ /start
@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    
    ref_link = await get_start_link(str(message.from_user.id), encode=True) # —Å–æ–∑–¥–∞—é —Å—Å—ã–ª–∫—É
    args = message.get_args() # —Ç—É—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π id, –∫–æ—Ç–æ—Ä—ã–π —è–≤–ª—è–µ—Ç—Å—è —á–∞—Å—Ç—å—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
    reference = decode_payload(args) # —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ id
    print(ref_link)
    print(args)
    print(len(args))

    await message.reply('{user}'.format(user=message.from_user.full_name) + ", –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–æ–±–µ–¥–æ–Ω–æ—Å–Ω—ã–π –±–æ—Ç!\n‚ö°Ô∏è–ó–¥–µ—Å—å –≤—ã–∏–≥—Ä—ã–≤–∞—é—Ç 100% –¥–∞–∂–µ —Å 1 —Ñ–∏—à–∫–æ–π —Ä—É–ª–µ—Ç–∫–∏ hydra\n‚ö°Ô∏è1 –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ —Ä—É–ª–µ—Ç–∫–∏ –ø–æ–∑–∏—Ü–∏–∏ –¥–æ 50000 —Ä—É–±–ª–µ–π - –±–µ—Å–ø–ª–∞—Ç–Ω–æ!\n‚ö°Ô∏è–õ—é–±—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ—Ä–æ–¥–∞!", reply_markup = nav.mainMenu)
    try:
        base = sqlite3.connect('data.db')
        cur = base.cursor()
        cur.execute(f'INSERT INTO "users" (user_id, link) VALUES ("{message.from_user.id}", "{ref_link}")')
        #cur.execute(f'UPDATE "users" SET user_id = "{message.from_user.id}" WHERE user_id = ""')
        base.commit()
    except Exception as e1:
        print(e1)
        base = sqlite3.connect('data.db')
        cur = base.cursor()
        cur.execute(f'INSERT INTO "users" (user_id, link) VALUES ("{message.from_user.id}", "{ref_link}")')
        #cur.execute(f'UPDATE "users" SET user_id = "{message.from_user.id}" WHERE user_id = ""')
        base.commit()    
    finally:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø–∏—Å–∏ –≤ ref_manager
        cur.execute(f'SELECT ref_manager FROM "users" WHERE user_id = "{message.from_user.id}"') # –≤—ã–±–∏—Ä–∞—é ref_manager –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞—é –∑–Ω–∞—á–µ–Ω–∏–µ —Å NULL
        base.commit()
        is_ref_manager = cur.fetchone() # –≤—ã—Ç–∞—Å–∫–∏–≤–∞—é —Ä–µ—Ñ –º—ç–Ω—ç–¥–∂—ç—Ä–∞ –≤ –≤–∏–¥–µ –ª–∏—Å—Ç–∞
        clean_ref_manager = is_ref_manager[0] # –±–µ—Ä—É –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞
        print(clean_ref_manager, " —Ä–µ—Ñ –º–µ–Ω–µ–¥–∂–µ—Ä")
    # –°–ß–ï–¢–ß–ò–ö
    #    i = 0
        if len(args) > 0: # –ï—Å–ª–∏ –¥–ª–∏–Ω–∞ payload —É /start –±–æ–ª—å—à–µ 0, —Ç–æ –µ—Å—Ç—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            cur.execute('SELECT ref_manager FROM "users" WHERE ref_manager')
            base.commit()
            is_all_ref_managers = cur.fetchall() # –≤—ã—Ç–∞—Å–∫–∏–≤–∞—é –≤—Å–µ—Ö —Ä–µ—Ñ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –≤ –≤–∏–¥–µ tuple
            Counter_all_ref_managers = Counter(is_all_ref_managers) # –ø–æ–ª—É—á–∞—é —Å–ª–æ–≤–∞—Ä—å —Å –∫–ª—é—á–∞–º–∏
            
            #print(Counter_all_ref_managers) # —Å–º–æ—Ç—Ä—é —Å–ª–æ–≤–∞—Ä—å, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –≤—ã—à–µ
            #How_ref_managers = len(Counter_all_ref_managers) # —Å—á–∏—Ç–∞—é —Å–∫–æ–ª—å–∫–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä–µ
            #print(How_ref_managers, " –°–∫–æ–ª—å–∫–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä–µ") # —Å–º–æ—Ç—Ä—é —Å–∫–æ–ª—å–∫–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä–µ
            #Last_index = How_ref_managers - 1
            #print(Last_index, " –ü–æ—Å–ª–µ–¥–Ω–∏–π –∏–Ω–¥–µ–∫—Å —Å–ª–æ–≤–∞—Ä—è")
            # —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å–ª–æ–≤–∞—Ä—è –ø–æ –∫–ª—é—á:–∑–Ω–∞—á–µ–Ω–∏–µ
            
            # –ò–ó–í–õ–ï–ö —Å –ø–æ–º–æ—â—å—é –∑–∞–ø—è—Ç–æ–π –µ–±–∞–Ω—ã–π –∫–æ—Ä—Ç–µ–∂!
            for key, value in Counter_all_ref_managers.items():
                key, = key
                print(key,':',value) # –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å * –ø–µ—Ä–µ–¥ key, —Ç–æ –∫–æ—Ä—Ç–µ–∂ —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ—Ç—Å—è
                cur.execute(f'UPDATE "users" SET referals = "{value}" WHERE user_id = "{key}"')
                base.commit()
 
        if clean_ref_manager == None:
            cur.execute(f'UPDATE "users" SET ref_manager = "{reference}" WHERE user_id = "{message.from_user.id}"') # —É–∫–∞–∑—ã–≤–∞—é –∫—Ç–æ –ø—Ä–∏–≥–ª–∞—Å–∏–ª 
            base.commit()
        else:
            print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –ø—Ä–∏–≥–ª–∞—à–µ–Ω –¥—Ä—É–≥–∏–º —Ä–µ—Ñ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –∏–ª–∏ —É /start –Ω–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ payload(–Ω–µ—Ç —Ä–µ—Ñ –º–µ–Ω–µ–¥–∂–µ—Ä–∞)")

# –†–∞–±–æ—Ç–∞ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
@dp.callback_query_handler()
async def process_callback_button1(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '–í—ã –ø–æ–ª—É—á–∏—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø—Ä–æ–∫—Ä—É—Ç–∫—É –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–∫—Ä—É—Ç–∏—Ç —Ä—É–ª–µ—Ç–∫—É —Å –ø–æ–º–æ—â—å—é –±–æ—Ç–∞.\n–¢–∞–∫–∂–µ 10% —Å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π –≤–∞—à–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞.\n')
# —Ä–∞–±–æ—Ç–∞ –∫–Ω–æ–ø–æ–∫ —É —é–∑–µ—Ä–æ–≤

@dp.message_handler()
async def bot_message(message: types.Message):
    
    if message.text == 'üë§–ü—Ä–æ—Ñ–∏–ª—å':
        
        cur.execute(f'SELECT link FROM "users" WHERE user_id = "{message.from_user.id}"') # –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –∏–∑ –±–¥ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
        record_link = cur.fetchone()
        cur.execute(f'SELECT referals FROM "users" WHERE user_id = "{message.from_user.id}"') # –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ —É —é–∑–µ—Ä–∞
        record_referals = cur.fetchone()
        # –±–µ—Ä—É –ø–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –ª–∏—Å—Ç–∞(–º–∞—Å—Å–∏–≤–∞)
        clean_link = record_link[0]
        clean_referals = record_referals[0]

        await message.reply(f"\n–í–∞—à–µ –∏–º—è: {message.from_user.full_name}\n–í–∞—à –±–∞–ª–∞–Ω—Å: 0 —Ä—É–±–ª–µ–π\n–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞: ‚úÖ\n–í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã: {clean_referals}\n–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{clean_link}\n–í–∞—à id: {message.from_user.id}\n–í–∞—à –Ω–∏–∫: {message.from_user.username}\n", reply_markup=nav.inline_kb1)
    if message.text == 'üí∞–ë–∞–ª–∞–Ω—Å':
        await message.reply("‚úÖ–í–∞–º –¥–æ—Å—Ç—É–ø–Ω–∞ 1 –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ —Ä—É–ª–µ—Ç–∫–∏ –¥–æ 50000 —Ä—É–±–ª–µ–π —Å 100% —à–∞–Ω—Å–æ–º –≤—ã–∏–≥—Ä–∞—Ç—å.\n‚úÖ–í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É.")
        await message.reply("üí∞–í–∞—à –±–∞–ª–∞–Ω—Å: 0 —Ä—É–±–ª–µ–π\nüíé–ü–æ–ø–æ–ª–Ω–∏—Ç—å –Ω–∞ —ç—Ç–æ—Ç bitcoin –∫–æ—à–µ–ª–µ–∫: 393o4b1eGmC8gVLxwJbzy27Snz7RSC1EkV")
    if message.text == 'üìù–¶–µ–Ω—ã':
        await message.reply("‚úÖ–í–∞–º –¥–æ—Å—Ç—É–ø–Ω–∞ 1 –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ —Ä—É–ª–µ—Ç–∫–∏ –¥–æ 50000 —Ä—É–±–ª–µ–π —Å 100% —à–∞–Ω—Å–æ–º –≤—ã–∏–≥—Ä–∞—Ç—å.\n‚úÖ–í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É.")
        await message.reply("–ü—Ä–∞–π—Å:\n‚ö°Ô∏è–†—É–ª–µ—Ç–∫–∞ –¥–æ 2500 —Ä—É–±–ª–µ–π —Å—Ç–æ–∏—Ç 500 —Ä—É–±–ª–µ–π.\n‚ö°Ô∏è–†—É–ª–µ—Ç–∫–∞ –æ—Ç 2500 –¥–æ 5000 —Å—Ç–æ–∏—Ç 1000 —Ä—É–±–ª–µ–π.\n‚ö°Ô∏è–ù–∞—Å—á–µ—Ç –±–æ–ª–µ–µ –∫—Ä—É–ø–Ω—ã—Ö —Å—É–º–º —É—Ç–æ—á–Ω—è–π—Ç–µ —É –ø–æ–¥–¥–µ—Ä–∂–∫–∏.")
    if message.text == '‚úÖ–í–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç':
        await message.reply(
"üìù–ù–∞–ø–∏—à–∏—Ç–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ—Ç —Å–∞–π—Ç–∞ hydra, —á—Ç–æ–±—ã –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç.\n‚öôÔ∏è–õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.\n‚öôÔ∏è–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä—É–ª–µ—Ç–∫–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –ø–æ—Å–ª–µ –ø–∞—Ä–æ–ª—è\n‚ùóÔ∏è–ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ —Ä—É–ª–µ—Ç–∫—É –∫—Ä—É—Ç–∏—Ç—å –º–æ–∂–Ω–æ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ –¥–æ 50000 —Ä—É–±–ª–µ–π!\n‚úâÔ∏è–ü–æ—Å–ª–µ —Ö—ç—à–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å —Å–≤–æ–π –Ω–∏–∫ —Ç–µ–ª–µ–≥—Ä–∞–º–∞ @ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏")
        if message.from_user.id == 511883882:
            await asyncio.sleep(10)
            await message.reply("–í–∞—à–µ –ø–æ–±–µ–¥–Ω–æ–µ —á–∏—Å–ª–æ: 39")
    if message.text == 'üëçüèª–ü–æ–¥–¥–µ—Ä–∂–∫–∞':
        await message.reply("üë§–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å —Å—é–¥–∞: \n‚öôÔ∏è@hydrasell")
    if message.text == 'üî•–ö—Ä—É—Ç–∏—Ç—å':
        await message.reply("‚úÖ–í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç\n‚ùå–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ\n‚úÖ–£ –≤–∞—Å –µ—Å—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ —Ä—É–ª–µ—Ç–∫–∏ 1 —Ä–∞–∑ –¥–æ 50000 —Ä—É–±–ª–µ–π!\n‚ö†Ô∏è–î–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ –∞–∫–∫–∞—É–Ω—Ç –≥–∏–¥—Ä—ã.\n‚ÄºÔ∏è –ù–∞ –∞–∫–∫–∞—É–Ω—Ç–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 1 –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è —Å–¥–µ–ª–∫–∞.")


    # –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –±–µ–∑ –∫–Ω–æ–ø–æ–∫
    texted = message.text
    if texted == 'üî•–ö—Ä—É—Ç–∏—Ç—å':
        await bot.send_message(CHANNEL_ID_ADM, texted)
        await asyncio.sleep(600)
        await bot.send_message(CHANNEL_ID, texted)
    elif texted == 'üë§–ü—Ä–æ—Ñ–∏–ª—å':
        await bot.send_message(CHANNEL_ID_ADM, texted)
        await asyncio.sleep(600)
        await bot.send_message(CHANNEL_ID, texted)
    elif texted == 'üí∞–ë–∞–ª–∞–Ω—Å':
        await bot.send_message(CHANNEL_ID_ADM, texted)
        await asyncio.sleep(600)
        await bot.send_message(CHANNEL_ID, texted)
    elif texted == 'üëçüèª–ü–æ–¥–¥–µ—Ä–∂–∫–∞':
        await bot.send_message(CHANNEL_ID_ADM, texted)
        await asyncio.sleep(600)
        await bot.send_message(CHANNEL_ID, texted)
    elif texted == 'üìù–¶–µ–Ω—ã':
        await bot.send_message(CHANNEL_ID_ADM, texted)
        await asyncio.sleep(600)
        await bot.send_message(CHANNEL_ID, texted)
    elif texted == '‚úÖ–í–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç':
        await bot.send_message(CHANNEL_ID_ADM, texted)
        await asyncio.sleep(600)
        await bot.send_message(CHANNEL_ID, texted)
    else:
        await bot.send_message(CHANNEL_ID_ADM, texted)
        await bot.send_message(CHANNEL_ID_NEED_ADM, texted)
        await message.reply("‚ö°Ô∏è–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –ø—Ä–∏–Ω—è—Ç—ã –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –û–∂–∏–¥–∞–π—Ç–µ...\n‚ö°Ô∏è–ï—Å–ª–∏ –≤—ã —É–∫–∞–∑–∞–ª–∏ –≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, —Ç–æ –í–∞–º –ø—Ä–∏–¥–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞ —Å —Ü–∏—Ñ—Ä–æ–π –¥–ª—è –ø–æ–±–µ–¥—ã –≤ —Ä—É–ª–µ—Ç–∫–µ –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–Ω—É—Ç.\n‚ö°Ô∏è–ï—Å–ª–∏ –±–æ—Ç –Ω–µ –ø—Ä–∏—Å–ª–∞–ª —á–∏—Å–ª–æ, –∑–Ω–∞—á–∏—Ç –±–æ—Ç –Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç 100% –≤—ã–∏–≥—Ä—ã—à.\n‚ö°Ô∏è–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –í–∞–º –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å —Å–≤–æ–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞, —á—Ç–æ–±—ã –ø–æ–≤—ã—Å–∏—Ç—å —Å–≤–æ–∏ —à–∞–Ω—Å—ã –Ω–∞ –≤—ã–∏–≥—Ä—ã—à.\n‚ö°Ô∏è–¢–∞–∫–∂–µ –±–æ—Ç –º–æ–∂–µ—Ç –Ω–µ –ø—Ä–∏—Å–ª–∞—Ç—å —á–∏—Å–ª–æ –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å–æ –≤—Ö–æ–¥–æ–º –≤ –∞–∫–∫–∞—É–Ω—Ç –∏–∑-–∑–∞ –≥—É–≥–ª –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.\n‚ö°Ô∏è–ü—Ä–æ—Å—å–±–∞ –æ—Ç–∫–ª—é—á–∏—Ç—å –≥—É–≥–ª –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä")
        await asyncio.sleep(600)
        await bot.send_message(CHANNEL_ID, texted)
        await bot.send_message(CHANNEL_ID_NEED, texted)    

# —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–æ–∫ 
#@dp.message_handler(commands=["ref"])
#async def get_ref(message: types.Message):
#   link = await get_start_link(str(message.from_user.username), encode=True)
#   result: 'https://t.me/MyBot?start='
#   –ø–æ—Å–ª–µ –∑–Ω–∞–∫–∞ = –±—É–¥–µ—Ç –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º —é–∑–µ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞–ª —Ä–µ—Ñ —Å—Å—ã–ª–∫—É, –≤–º–µ—Å—Ç–æ –Ω–µ–≥–æ –º–æ–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å –∏ –µ–≥–æ id 
#   await message.answer(f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ {link}")


# —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ —Å—Å—ã–ª–∫–∏
#@dp.message_handler(commands=["start"])
#async def handler(message: types.Message):
#    args = message.get_args()
#    reference = decode_payload(args)
#    await message.answer(f"–í–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª {reference}") #–∑–¥–µ—Å—å –≤  reference –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —é–∑–µ—Ä–Ω–µ–π–º, —Ç–æ–≥–æ –∫—Ç–æ —Å–æ–∑–¥–∞–ª —Å—Å—ã–ª–∫—É




#  –ø–æ–ª–ª–∏–Ω–≥ = –æ–ø—Ä–∞—à–∏–≤–∞—é —Å–µ—Ä–≤–µ—Ä–∞ —Ç–µ–ª–µ–≥—Ä–∞–º –æ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö?
if __name__ == '__main__':
    executor.start_polling(dp)